NAME
    BusyBox - The Swiss Army Knife of Embedded Linux

SYNTAX
     busybox <applet> [arguments...]  # or

     <applet> [arguments...]          # if symlinked

DESCRIPTION
    BusyBox combines tiny versions of many common UNIX utilities into a
    single small executable. It provides minimalist replacements for most of
    the utilities you usually find in GNU coreutils, util-linux, etc. The
    utilities in BusyBox generally have fewer options than their
    full-featured GNU cousins; however, the options that are included
    provide the expected functionality and behave very much like their GNU
    counterparts.

    BusyBox has been written with size-optimization and limited resources in
    mind. It is also extremely modular so you can easily include or exclude
    commands (or features) at compile time. This makes it easy to customize
    your embedded systems. To create a working system, just add /dev, /etc,
    and a Linux kernel. BusyBox provides a fairly complete POSIX environment
    for any small or embedded system.

    BusyBox is extremely configurable. This allows you to include only the
    components you need, thereby reducing binary size. Run 'make config' or
    'make menuconfig' to select the functionality that you wish to enable.
    Then run 'make' to compile BusyBox using your configuration.

    After the compile has finished, you should use 'make install' to install
    BusyBox. This will install the 'bin/busybox' binary, in the target
    directory specified by CONFIG_PREFIX. CONFIG_PREFIX can be set when
    configuring BusyBox, or you can specify an alternative location at
    install time (i.e., with a command line like 'make
    CONFIG_PREFIX=/tmp/foo install'). If you enabled any applet installation
    scheme (either as symlinks or hardlinks), these will also be installed
    in the location pointed to by CONFIG_PREFIX.

USAGE
    BusyBox is a multi-call binary. A multi-call binary is an executable
    program that performs the same job as more than one utility program.
    That means there is just a single BusyBox binary, but that single binary
    acts like a large number of utilities. This allows BusyBox to be smaller
    since all the built-in utility programs (we call them applets) can share
    code for many common operations.

    You can also invoke BusyBox by issuing a command as an argument on the
    command line. For example, entering

            /bin/busybox ls

    will also cause BusyBox to behave as 'ls'.

    Of course, adding '/bin/busybox' into every command would be painful. So
    most people will invoke BusyBox using links to the BusyBox binary.

    For example, entering

            ln -s /bin/busybox ls
            ./ls

    will cause BusyBox to behave as 'ls' (if the 'ls' command has been
    compiled into BusyBox). Generally speaking, you should never need to
    make all these links yourself, as the BusyBox build system will do this
    for you when you run the 'make install' command.

    If you invoke BusyBox with no arguments, it will provide you with a list
    of the applets that have been compiled into your BusyBox binary.

COMMON OPTIONS
    Most BusyBox applets support the --help argument to provide a terse
    runtime description of their behavior. If the
    CONFIG_FEATURE_VERBOSE_USAGE option has been enabled, more detailed
    usage information will also be available.

COMMANDS
    Currently available applets include:

            [, [[, ar, base64, basename, bunzip2, bzcat, bzip2, cal, cat, catv,
            chgrp, chmod, chown, cp, cpio, cut, dd, echo, egrep, env, expand,
            expr, false, fgrep, find, fold, fsync, grep, gunzip, gzip, head,
            install, ln, ls, lzcat, lzma, lzop, lzopcat, md5sum, mkdir, mkfifo,
            mknod, mv, nice, nohup, od, printf, pwd, readlink, realpath, rm,
            rmdir, sed, seq, sha1sum, sha256sum, sha3sum, sha512sum, sleep,
            sort, split, strings, stty, sum, sync, tac, tail, tar, tee, test,
            touch, tr, true, truncate, uname, uncompress, unexpand, uniq,
            unlink, unlzma, unlzop, unxz, unzip, usleep, uudecode, uuencode, wc,
            which, whoami, xargs, xz, xzcat, yes, zcat

COMMAND DESCRIPTIONS
    ar  ar [-o] [-v] [-p] [-t] [-x] ARCHIVE FILES

        Extract or list FILES from an ar archive

                -o      Preserve original dates
                -p      Extract to stdout
                -t      List
                -x      Extract
                -v      Verbose

    base64
        base64 [-d] [FILE]

        Base64 encode or decode FILE to standard output -d Decode data

    basename
        basename FILE [SUFFIX]

        Strip directory path and .SUFFIX from FILE

    bunzip2
        bunzip2 [-cf] [FILE]...

        Decompress FILEs (or stdin)

                -c      Write to stdout
                -f      Force

    bzcat
        bzcat [FILE]...

        Decompress to stdout

    bzip2
        bzip2 [OPTIONS] [FILE]...

        Compress FILEs (or stdin) with bzip2 algorithm

                -1..9   Compression level
                -d      Decompress
                -c      Write to stdout
                -f      Force

    cal cal [-jy] [[MONTH] YEAR]

        Display a calendar

                -j      Use julian dates
                -y      Display the entire year

    cat cat [FILE]...

        Concatenate FILEs and print them to stdout

    catv
        catv [-etv] [FILE]...

        Display nonprinting characters as ^x or M-x

                -e      End each line with $
                -t      Show tabs as ^I
                -v      Don't use ^x or M-x escapes

    chgrp
        chgrp [-RhLHPcvf]... GROUP FILE...

        Change the group membership of each FILE to GROUP

                -R      Recurse
                -h      Affect symlinks instead of symlink targets
                -L      Traverse all symlinks to directories
                -H      Traverse symlinks on command line only
                -P      Don't traverse symlinks (default)
                -c      List changed files
                -v      Verbose
                -f      Hide errors

    chmod
        chmod [-Rcvf] MODE[,MODE]... FILE...

        Each MODE is one or more of the letters ugoa, one of the symbols +-=
        and one or more of the letters rwxst

                -R      Recurse
                -c      List changed files
                -v      List all files
                -f      Hide errors

    chown
        chown [-RhLHPcvf]... USER[:[GRP]] FILE...

        Change the owner and/or group of each FILE to USER and/or GRP

                -R      Recurse
                -h      Affect symlinks instead of symlink targets
                -L      Traverse all symlinks to directories
                -H      Traverse symlinks on command line only
                -P      Don't traverse symlinks (default)
                -c      List changed files
                -v      List all files
                -f      Hide errors

    cp  cp [OPTIONS] SOURCE... DEST

        Copy SOURCE(s) to DEST

                -a      Same as -dpR
                -R,-r   Recurse
                -d,-P   Preserve symlinks (default if -R)
                -L      Follow all symlinks
                -H      Follow symlinks on command line
                -p      Preserve file attributes if possible
                -f      Overwrite
                -i      Prompt before overwrite
                -l,-s   Create (sym)links
                -u      Copy only newer files

    cpio
        cpio [-dmvu] [-F FILE] [-R USER[:GRP]] [-H newc] [-tio] [-p DIR]
        [EXTR_FILE]...

        Extract or list files from a cpio archive, or create an archive (-o)
        or copy files (-p) using file list on stdin

        Main operation mode:

                -t      List
                -i      Extract EXTR_FILEs (or all)
                -o      Create (requires -H newc)
                -p DIR  Copy files to DIR
        Options:

                -d      Make leading directories
                -m      Preserve mtime
                -v      Verbose
                -u      Overwrite
                -F FILE Input (-t,-i,-p) or output (-o) file
                -R USER[:GRP]   Set owner of created files
                -H newc Archive format

    cut cut [OPTIONS] [FILE]...

        Print selected fields from each input FILE to stdout

                -b LIST Output only bytes from LIST
                -c LIST Output only characters from LIST
                -d CHAR Use CHAR instead of tab as the field delimiter
                -s      Output only the lines containing delimiter
                -f N    Print only these fields
                -n      Ignored

    dd  dd [if=FILE] [of=FILE] [ibs=N] [obs=N] [bs=N] [count=N] [skip=N]
        [seek=N] [conv=notrunc|noerror|sync|fsync] [iflag=skip_bytes]

        Copy a file with converting and formatting

                if=FILE         Read from FILE instead of stdin
                of=FILE         Write to FILE instead of stdout
                bs=N            Read and write N bytes at a time
                ibs=N           Read N bytes at a time
                obs=N           Write N bytes at a time
                count=N         Copy only N input blocks
                skip=N          Skip N input blocks
                seek=N          Skip N output blocks
                conv=notrunc    Don't truncate output file
                conv=noerror    Continue after read errors
                conv=sync       Pad blocks with zeros
                conv=fsync      Physically write data out before finishing
                conv=swab       Swap every pair of bytes
                iflag=skip_bytes        skip=N is in bytes
                status=noxfer   Suppress rate output
                status=none     Suppress all output

        N may be suffixed by c (1), w (2), b (512), kB (1000), k (1024), MB,
        M, GB, G

    echo
        echo [-neE] [ARG]...

        Print the specified ARGs to stdout

                -n      Suppress trailing newline
                -e      Interpret backslash escapes (i.e., \t=tab)
                -E      Don't interpret backslash escapes (default)

    env env [-iu] [-] [name=value]... [PROG ARGS]

        Print the current environment or run PROG after setting up the
        specified environment

                -, -i   Start with an empty environment
                -u      Remove variable from the environment

    expand
        expand [-i] [-t N] [FILE]...

        Convert tabs to spaces, writing to stdout

                -i      Don't convert tabs after non blanks
                -t      Tabstops every N chars

    expr
        expr EXPRESSION

        Print the value of EXPRESSION to stdout

        EXPRESSION may be:

                ARG1 | ARG2     ARG1 if it is neither null nor 0, otherwise ARG2
                ARG1 & ARG2     ARG1 if neither argument is null or 0, otherwise 0
                ARG1 < ARG2     1 if ARG1 is less than ARG2, else 0. Similarly:
                ARG1 <= ARG2
                ARG1 = ARG2
                ARG1 != ARG2
                ARG1 >= ARG2
                ARG1 > ARG2
                ARG1 + ARG2     Sum of ARG1 and ARG2. Similarly:
                ARG1 - ARG2
                ARG1 * ARG2
                ARG1 / ARG2
                ARG1 % ARG2
                STRING : REGEXP         Anchored pattern match of REGEXP in STRING
                match STRING REGEXP     Same as STRING : REGEXP
                substr STRING POS LENGTH Substring of STRING, POS counted from 1
                index STRING CHARS      Index in STRING where any CHARS is found, or 0
                length STRING           Length of STRING
                quote TOKEN             Interpret TOKEN as a string, even if
                                        it is a keyword like 'match' or an
                                        operator like '/'
                (EXPRESSION)            Value of EXPRESSION

        Beware that many operators need to be escaped or quoted for shells.
        Comparisons are arithmetic if both ARGs are numbers, else
        lexicographical. Pattern matches return the string matched between
        \( and \) or null; if \( and \) are not used, they return the number
        of characters matched or 0.

    find
        find [-HL] [PATH]... [OPTIONS] [ACTIONS]

        Search for files and perform actions on them. First failed action
        stops processing of current file. Defaults: PATH is current
        directory, action is '-print'

                -L,-follow      Follow symlinks
                -H              ...on command line only
                -xdev           Don't descend directories on other filesystems
                -maxdepth N     Descend at most N levels. -maxdepth 0 applies
                                actions to command line arguments only
                -mindepth N     Don't act on first N levels
                -depth          Act on directory *after* traversing it

        Actions:

                ( ACTIONS )     Group actions for -o / -a
                ! ACT           Invert ACT's success/failure
                ACT1 [-a] ACT2  If ACT1 fails, stop, else do ACT2
                ACT1 -o ACT2    If ACT1 succeeds, stop, else do ACT2
                                Note: -a has higher priority than -o
                -name PATTERN   Match file name (w/o directory name) to PATTERN
                -iname PATTERN  Case insensitive -name
                -path PATTERN   Match path to PATTERN
                -ipath PATTERN  Case insensitive -path
                -regex PATTERN  Match path to regex PATTERN
                -type X         File type is X (one of: f,d,l,b,c,...)
                -perm MASK      At least one mask bit (+MASK), all bits (-MASK),
                                or exactly MASK bits are set in file's mode
                -mtime DAYS     mtime is greater than (+N), less than (-N),
                                or exactly N days in the past
                -mmin MINS      mtime is greater than (+N), less than (-N),
                                or exactly N minutes in the past
                -newer FILE     mtime is more recent than FILE's
                -inum N         File has inode number N
                -user NAME/ID   File is owned by given user
                -group NAME/ID  File is owned by given group
                -size N[bck]    File size is N (c:bytes,k:kbytes,b:512 bytes(def.))
                                +/-N: file size is bigger/smaller than N
                -links N        Number of links is greater than (+N), less than (-N),
                                or exactly N
                -prune          If current file is directory, don't descend into it
        If none of the following actions is specified, -print is assumed
                -print          Print file name
                -print0         Print file name, NUL terminated
                -exec CMD ARG ; Run CMD with all instances of {} replaced by
                                file name. Fails if CMD exits with nonzero
                -exec CMD ARG + Run CMD with {} replaced by list of file names
                -delete         Delete current file/directory. Turns on -depth option

    fold
        fold [-bs] [-w WIDTH] [FILE]...

        Wrap input lines in each FILE (or stdin), writing to stdout

                -b      Count bytes rather than columns
                -s      Break at spaces
                -w      Use WIDTH columns instead of 80

    fsync
        fsync [-d] FILE...

        Write files' buffered blocks to disk

                -d      Avoid syncing metadata

    grep
        grep [-HhnlLoqvsriwFE] [-m N] [-A/B/C N] PATTERN/-e PATTERN.../-f
        FILE [FILE]...

        Search for PATTERN in FILEs (or stdin)

                -H      Add 'filename:' prefix
                -h      Do not add 'filename:' prefix
                -n      Add 'line_no:' prefix
                -l      Show only names of files that match
                -L      Show only names of files that don't match
                -c      Show only count of matching lines
                -o      Show only the matching part of line
                -q      Quiet. Return 0 if PATTERN is found, 1 otherwise
                -v      Select non-matching lines
                -s      Suppress open and read errors
                -r      Recurse
                -i      Ignore case
                -w      Match whole words only
                -x      Match whole lines only
                -F      PATTERN is a literal (not regexp)
                -E      PATTERN is an extended regexp
                -m N    Match up to N times per file
                -A N    Print N lines of trailing context
                -B N    Print N lines of leading context
                -C N    Same as '-A N -B N'
                -e PTRN Pattern to match
                -f FILE Read pattern from file

    gunzip
        gunzip [-cft] [FILE]...

        Decompress FILEs (or stdin)

                -c      Write to stdout
                -f      Force
                -t      Test file integrity

    gzip
        gzip [-cfd] [FILE]...

        Compress FILEs (or stdin)

                -d      Decompress
                -c      Write to stdout
                -f      Force

    head
        head [OPTIONS] [FILE]...

        Print first 10 lines of each FILE (or stdin) to stdout. With more
        than one FILE, precede each with a filename header.

                -n N[kbm]       Print first N lines
                -n -N[kbm]      Print all except N last lines
                -c [-]N[kbm]    Print first N bytes
                -q              Never print headers
                -v              Always print headers

        N may be suffixed by k (x1024), b (x512), or m (x1024^2).

    install
        install [-cdDsp] [-o USER] [-g GRP] [-m MODE] [-t DIR] [SOURCE]...
        DEST

        Copy files and set attributes

                -c      Just copy (default)
                -d      Create directories
                -D      Create leading target directories
                -s      Strip symbol table
                -p      Preserve date
                -o USER Set ownership
                -g GRP  Set group ownership
                -m MODE Set permissions
                -t DIR  Install to DIR

    ln  ln [OPTIONS] TARGET... LINK|DIR

        Create a link LINK or DIR/TARGET to the specified TARGET(s)

                -s      Make symlinks instead of hardlinks
                -f      Remove existing destinations
                -n      Don't dereference symlinks - treat like normal file
                -b      Make a backup of the target (if exists) before link operation
                -S suf  Use suffix instead of ~ when making backup files
                -T      2nd arg must be a DIR
                -v      Verbose

    ls  ls [-1AaCxdLHRFplinsehrSXvctu] [-w WIDTH] [FILE]...

        List directory contents

                -1      One column output
                -a      Include entries which start with .
                -A      Like -a, but exclude . and ..
                -C      List by columns
                -x      List by lines
                -d      List directory entries instead of contents
                -L      Follow symlinks
                -H      Follow symlinks on command line
                -R      Recurse
                -p      Append / to dir entries
                -F      Append indicator (one of */=@|) to entries
                -l      Long listing format
                -i      List inode numbers
                -n      List numeric UIDs and GIDs instead of names
                -s      List allocated blocks
                -e      List full date and time
                -h      List sizes in human readable format (1K 243M 2G)
                -r      Sort in reverse order
                -S      Sort by size
                -X      Sort by extension
                -v      Sort by version
                -c      With -l: sort by ctime
                -t      With -l: sort by mtime
                -u      With -l: sort by atime
                -w N    Assume the terminal is N columns wide
                --color[={always,never,auto}]   Control coloring

    lzcat
        lzcat [FILE]...

        Decompress to stdout

    lzma
        lzma -d [-cf] [FILE]...

        Decompress FILE (or stdin)

                -d      Decompress
                -c      Write to stdout
                -f      Force

    lzop
        lzop [-cfvd123456789CF] [FILE]...

                -1..9   Compression level
                -d      Decompress
                -c      Write to stdout
                -f      Force
                -v      Verbose
                -F      Don't store or verify checksum
                -C      Also write checksum of compressed block

    lzopcat
        lzopcat [-vCF] [FILE]...

                -v      Verbose
                -F      Don't store or verify checksum

    md5sum
        md5sum [-c[sw]] [FILE]...

        Print or check MD5 checksums

                -c      Check sums against list in FILEs
                -s      Don't output anything, status code shows success
                -w      Warn about improperly formatted checksum lines

    mkdir
        mkdir [OPTIONS] DIRECTORY...

        Create DIRECTORY

                -m MODE Mode
                -p      No error if exists; make parent directories as needed

    mkfifo
        mkfifo [-m MODE] NAME

        Create named pipe

                -m MODE Mode (default a=rw)

    mknod
        mknod [-m MODE] NAME TYPE MAJOR MINOR

        Create a special file (block, character, or pipe)

                -m MODE Creation mode (default a=rw)
        TYPE:
                b       Block device
                c or u  Character device
                p       Named pipe (MAJOR and MINOR are ignored)

    mv  mv [-fin] SOURCE DEST or: mv [-fin] SOURCE... DIRECTORY

        Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY

                -f      Don't prompt before overwriting
                -i      Interactive, prompt before overwrite
                -n      Don't overwrite an existing file

    nice
        nice [-n ADJUST] [PROG ARGS]

        Change scheduling priority, run PROG

                -n ADJUST       Adjust priority by ADJUST

    nohup
        nohup PROG ARGS

        Run PROG immune to hangups, with output to a non-tty

    od  od [-abcdfhilovxs] [-t TYPE] [-A RADIX] [-N SIZE] [-j SKIP] [-S
        MINSTR] [-w WIDTH] [FILE]...

        Print FILEs (or stdin) unambiguously, as octal bytes by default

    printf
        printf FORMAT [ARG]...

        Format and print ARG(s) according to FORMAT (a-la C printf)

    pwd pwd

        Print the full filename of the current working directory

    readlink
        readlink [-fnv] FILE

        Display the value of a symlink

                -f      Canonicalize by following all symlinks
                -n      Don't add newline
                -v      Verbose

    realpath
        realpath FILE...

        Return the absolute pathnames of given FILE

    rm  rm [-irf] FILE...

        Remove (unlink) FILEs

                -i      Always prompt before removing
                -f      Never prompt
                -R,-r   Recurse

    rmdir
        rmdir [OPTIONS] DIRECTORY...

        Remove DIRECTORY if it is empty

                -p      Include parents

    sed sed [-inrE] [-f FILE]... [-e CMD]... [FILE]... or: sed [-inrE] CMD
        [FILE]...

                -e CMD  Add CMD to sed commands to be executed
                -f FILE Add FILE contents to sed commands to be executed
                -i[SFX] Edit files in-place (otherwise sends to stdout)
                        Optionally back files up, appending SFX
                -n      Suppress automatic printing of pattern space
                -r,-E   Use extended regex syntax

        If no -e or -f, the first non-option argument is the sed command
        string. Remaining arguments are input files (stdin if none).

    seq seq [-w] [-s SEP] [FIRST [INC]] LAST

        Print numbers from FIRST to LAST, in steps of INC. FIRST, INC
        default to 1.

                -w      Pad to last with leading zeros
                -s SEP  String separator

    sha1sum
        sha1sum [-c[sw]] [FILE]...

        Print or check SHA1 checksums

                -c      Check sums against list in FILEs
                -s      Don't output anything, status code shows success
                -w      Warn about improperly formatted checksum lines

    sha256sum
        sha256sum [-c[sw]] [FILE]...

        Print or check SHA256 checksums

                -c      Check sums against list in FILEs
                -s      Don't output anything, status code shows success
                -w      Warn about improperly formatted checksum lines

    sha3sum
        sha3sum [-c[sw]] [FILE]...

        Print or check SHA3-512 checksums

                -c      Check sums against list in FILEs
                -s      Don't output anything, status code shows success
                -w      Warn about improperly formatted checksum lines

    sha512sum
        sha512sum [-c[sw]] [FILE]...

        Print or check SHA512 checksums

                -c      Check sums against list in FILEs
                -s      Don't output anything, status code shows success
                -w      Warn about improperly formatted checksum lines

    sleep
        sleep [N]...

        Pause for a time equal to the total of the args given, where each
        arg can have an optional suffix of (s)econds, (m)inutes, (h)ours, or
        (d)ays

    sort
        sort [-nrugMcszbdfiokt] [-o FILE] [-k
        start[.offset][opts][,end[.offset][opts]] [-t CHAR] [FILE]...

        Sort lines of text

                -o FILE Output to FILE
                -c      Check whether input is sorted
                -b      Ignore leading blanks
                -f      Ignore case
                -i      Ignore unprintable characters
                -d      Dictionary order (blank or alphanumeric only)
                -g      General numerical sort
                -M      Sort month
                -n      Sort numbers
                -t CHAR Field separator
                -k N[,M] Sort by Nth field
                -r      Reverse sort order
                -s      Stable (don't sort ties alphabetically)
                -u      Suppress duplicate lines
                -z      Lines are terminated by NUL, not newline

    split
        split [OPTIONS] [INPUT [PREFIX]]

                -b N[k|m]       Split by N (kilo|mega)bytes
                -l N            Split by N lines
                -a N            Use N letters as suffix

    strings
        strings [-afo] [-n LEN] [FILE]...

        Display printable strings in a binary file

                -a      Scan whole file (default)
                -f      Precede strings with filenames
                -n LEN  At least LEN characters form a string (default 4)
                -o      Precede strings with decimal offsets

    stty
        stty [-a|g] [-F DEVICE] [SETTING]...

        Without arguments, prints baud rate, line discipline, and deviations
        from stty sane

                -F DEVICE       Open device instead of stdin
                -a              Print all current settings in human-readable form
                -g              Print in stty-readable form
                [SETTING]       See manpage

    sum sum [-rs] [FILE]...

        Checksum and count the blocks in a file

                -r      Use BSD sum algorithm (1K blocks)
                -s      Use System V sum algorithm (512byte blocks)

    sync
        sync

        Write all buffered blocks to disk

    tac tac [FILE]...

        Concatenate FILEs and print them in reverse

    tail
        tail [OPTIONS] [FILE]...

        Print last 10 lines of each FILE (or stdin) to stdout. With more
        than one FILE, precede each with a filename header.

                -f              Print data as file grows
                -c [+]N[kbm]    Print last N bytes
                -n N[kbm]       Print last N lines
                -n +N[kbm]      Start on Nth line and print the rest
                -q              Never print headers
                -s SECONDS      Wait SECONDS between reads with -f
                -v              Always print headers
                -F              Same as -f, but keep retrying

        N may be suffixed by k (x1024), b (x512), or m (x1024^2).

    tar tar -[cxtZzJjahmvO] [-X FILE] [-T FILE] [-f TARFILE] [-C DIR]
        [FILE]...

        Create, extract, or list files from a tar file

        Operation:

                c       Create
                x       Extract
                t       List
                f       Name of TARFILE ('-' for stdin/out)
                C       Change to DIR before operation
                v       Verbose
                Z       (De)compress using compress
                z       (De)compress using gzip
                J       (De)compress using xz
                j       (De)compress using bzip2
                a       (De)compress using lzma
                O       Extract to stdout
                h       Follow symlinks
                m       Don't restore mtime
                X       File with names to exclude
                T       File with names to include

    tee tee [-ai] [FILE]...

        Copy stdin to each FILE, and also to stdout

                -a      Append to the given FILEs, don't overwrite
                -i      Ignore interrupt signals (SIGINT)

    touch
        touch [-c] [-d DATE] [-t DATE] [-r FILE] FILE...

        Update the last-modified date on the given FILE[s]

                -c      Don't create files
                -d DT   Date/time to use
                -t DT   Date/time to use
                -r FILE Use FILE's date/time

    tr  tr [-cds] STRING1 [STRING2]

        Translate, squeeze, or delete characters from stdin, writing to
        stdout

                -c      Take complement of STRING1
                -d      Delete input characters coded STRING1
                -s      Squeeze multiple output characters of STRING2 into one character

    truncate
        truncate [-c] -s SIZE FILE...

        Truncate FILEs to the given size

                -c      Do not create files
                -s SIZE Truncate to SIZE

    uname
        uname [-amnrspvio]

        Print system information

                -a      Print all
                -m      The machine (hardware) type
                -n      Hostname
                -r      Kernel release
                -s      Kernel name (default)
                -p      Processor type
                -v      Kernel version
                -i      The hardware platform
                -o      OS name

    uncompress
        uncompress [-cf] [FILE]...

        Decompress .Z file[s]

                -c      Write to stdout
                -f      Overwrite

    unexpand
        unexpand [-fa][-t N] [FILE]...

        Convert spaces to tabs, writing to stdout

                -a      Convert all blanks
                -f      Convert only leading blanks
                -t N    Tabstops every N chars

    uniq
        uniq [-cdu][-f,s,w N] [INPUT [OUTPUT]]

        Discard duplicate lines

                -c      Prefix lines by the number of occurrences
                -d      Only print duplicate lines
                -u      Only print unique lines
                -f N    Skip first N fields
                -s N    Skip first N chars (after any skipped fields)
                -w N    Compare N characters in line

    unlink
        unlink FILE

        Delete FILE by calling unlink()

    unlzma
        unlzma [-cf] [FILE]...

        Decompress FILE (or stdin)

                -c      Write to stdout
                -f      Force

    unlzop
        unlzop [-cfvCF] [FILE]...

                -c      Write to stdout
                -f      Force
                -v      Verbose
                -F      Don't store or verify checksum

    unxz
        unxz [-cf] [FILE]...

        Decompress FILE (or stdin)

                -c      Write to stdout
                -f      Force

    unzip
        unzip [-lnopq] FILE[.zip] [FILE]... [-x FILE...] [-d DIR]

        Extract FILEs from ZIP archive

                -l      List contents (with -q for short form)
                -n      Never overwrite files (default: ask)
                -o      Overwrite
                -p      Print to stdout
                -q      Quiet
                -x FILE Exclude FILEs
                -d DIR  Extract into DIR

    usleep
        usleep N

        Pause for N microseconds

    uudecode
        uudecode [-o OUTFILE] [INFILE]

        Uudecode a file Finds OUTFILE in uuencoded source unless -o is given

    uuencode
        uuencode [-m] [FILE] STORED_FILENAME

        Uuencode FILE (or stdin) to stdout

                -m      Use base64 encoding per RFC1521

    wc  wc [-clwL] [FILE]...

        Count lines, words, and bytes for each FILE (or stdin)

                -c      Count bytes
                -l      Count newlines
                -w      Count words
                -L      Print longest line length

    which
        which [COMMAND]...

        Locate a COMMAND

    whoami
        whoami

        Print the user name associated with the current effective user id

    xargs
        xargs [OPTIONS] [PROG ARGS]

        Run PROG on every item given by stdin

                -p      Ask user whether to run each command
                -r      Don't run command if input is empty
                -0      Input is separated by NUL characters
                -t      Print the command on stderr before execution
                -e[STR] STR stops input processing
                -n N    Pass no more than N args to PROG
                -s N    Pass command line of no more than N bytes
                -I STR  Replace STR within PROG ARGS with input line
                -x      Exit if size is exceeded

    xz  xz -d [-cf] [FILE]...

        Decompress FILE (or stdin)

                -d      Decompress
                -c      Write to stdout
                -f      Force

    xzcat
        xzcat [FILE]...

        Decompress to stdout

    yes yes [STRING]

        Repeatedly output a line with STRING, or 'y'

    zcat
        zcat [FILE]...

        Decompress to stdout

LIBC NSS
    GNU Libc (glibc) uses the Name Service Switch (NSS) to configure the
    behavior of the C library for the local environment, and to configure
    how it reads system data, such as passwords and group information. This
    is implemented using an /etc/nsswitch.conf configuration file, and using
    one or more of the /lib/libnss_* libraries. BusyBox tries to avoid using
    any libc calls that make use of NSS. Some applets however, such as login
    and su, will use libc functions that require NSS.

    If you enable CONFIG_USE_BB_PWD_GRP, BusyBox will use internal functions
    to directly access the /etc/passwd, /etc/group, and /etc/shadow files
    without using NSS. This may allow you to run your system without the
    need for installing any of the NSS configuration files and libraries.

    When used with glibc, the BusyBox 'networking' applets will similarly
    require that you install at least some of the glibc NSS stuff (in
    particular, /etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*,
    and /lib/libresolv*).

    Shameless Plug: As an alternative, one could use a C library such as
    uClibc. In addition to making your system significantly smaller, uClibc
    does not require the use of any NSS support files or libraries.

MAINTAINER
    Denis Vlasenko <vda.linux@googlemail.com>

AUTHORS
    The following people have contributed code to BusyBox whether they know
    it or not. If you have written code included in BusyBox, you should
    probably be listed here so you can obtain your bit of eternal glory. If
    you should be listed here, or the description of what you have done
    needs more detail, or is incorrect, please send in an update.

    Emanuele Aina <emanuele.aina@tiscali.it> run-parts

    Erik Andersen <andersen@codepoet.org>

        Tons of new stuff, major rewrite of most of the
        core apps, tons of new apps as noted in header files.
        Lots of tedious effort writing these boring docs that
        nobody is going to actually read.

    Laurence Anderson <l.d.anderson@warwick.ac.uk>

        rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm

    Jeff Angielski <jeff@theptrgroup.com>

        ftpput, ftpget

    Edward Betts <edward@debian.org>

        expr, hostid, logname, whoami

    John Beppu <beppu@codepoet.org>

        du, nslookup, sort

    Brian Candler <B.Candler@pobox.com>

        tiny-ls(ls)

    Randolph Chung <tausq@debian.org>

        fbset, ping, hostname

    Dave Cinege <dcinege@psychosis.com>

        more(v2), makedevs, dutmp, modularization, auto links file,
        various fixes, Linux Router Project maintenance

    Jordan Crouse <jordan@cosmicpenguin.net>

        ipcalc

    Magnus Damm <damm@opensource.se>

        tftp client insmod powerpc support

    Larry Doolittle <ldoolitt@recycle.lbl.gov>

        pristine source directory compilation, lots of patches and fixes.

    Glenn Engel <glenne@engel.org>

        httpd

    Gennady Feldman <gfeldman@gena01.com>

        Sysklogd (single threaded syslogd, IPC Circular buffer support,
        logread), various fixes.

    Karl M. Hegbloom <karlheg@debian.org>

        cp_mv.c, the test suite, various fixes to utility.c, &c.

    Daniel Jacobowitz <dan@debian.org>

        mktemp.c

    Matt Kraai <kraai@alumni.cmu.edu>

        documentation, bugfixes, test suite

    Stephan Linz <linz@li-pro.net>

        ipcalc, Red Hat equivalence

    John Lombardo <john@deltanet.com>

        tr

    Glenn McGrath <bug1@iinet.net.au>

        Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
        nameif, sed, patch, fold, install, uudecode.
        Various bugfixes, review and apply numerous patches.

    Manuel Novoa III <mjn3@codepoet.org>

        cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
        mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
        get_last_path_component, simplify_path, and a number trivial libbb routines

        also bug fixes, partial rewrites, and size optimizations in
        ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
        mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
        interface, dutmp, ifconfig, route

    Vladimir Oleynik <dzo@simtreas.ru>

        cmdedit; xargs(current), httpd(current);
        ports: ash, crond, fdisk, inetd, stty, traceroute, top;
        locale, various fixes
        and irreconcilable critic of everything not perfect.

    Bruce Perens <bruce@pixar.com>

        Original author of BusyBox in 1995, 1996. Some of his code can
        still be found hiding here and there...

    Tim Riker <Tim@Rikers.org>

        bug fixes, member of fan club

    Kent Robotti <robotti@metconnect.com>

        reset, tons and tons of bug reports and patches.

    Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>

        wget - Contributed by permission of Covad Communications

    Pavel Roskin <proski@gnu.org>

        Lots of bugs fixes and patches.

    Gyepi Sam <gyepi@praxis-sw.com>

        Remote logging feature for syslogd

    Linus Torvalds <torvalds@transmeta.com>

        mkswap, fsck.minix, mkfs.minix

    Mark Whitley <markw@codepoet.org>

        grep, sed, cut, xargs(previous),
        style-guide, new-applet-HOWTO, bug fixes, etc.

    Charles P. Wright <cpwright@villagenet.com>

        gzip, mini-netcat(nc)

    Enrique Zanardi <ezanardi@ull.es>

        tarcat (since removed), loadkmap, various fixes, Debian maintenance

    Tito Ragusa <farmatito@tiscali.it>

        devfsd and size optimizations in strings, openvt and deallocvt.

    Paul Fox <pgf@foxharp.boston.ma.us>

        vi editing mode for ash, various other patches/fixes

    Roberto A. Foglietta <me@roberto.foglietta.name>

        port: dnsd

    Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>

        misc

    Mike Frysinger <vapier@gentoo.org>

        initial e2fsprogs, printenv, setarch, sum, misc

    Jie Zhang <jie.zhang@analog.com>

        fixed two bugs in msh and hush (exitcode of killed processes)

