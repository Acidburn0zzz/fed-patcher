.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.32)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BUSYBOX 1"
.TH BUSYBOX 1 "2016-10-22" "version 1.25.1" "busybox"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BusyBox \- The Swiss Army Knife of Embedded Linux
.SH "SYNTAX"
.IX Header "SYNTAX"
.Vb 1
\& busybox <applet> [arguments...]  # or
\&
\& <applet> [arguments...]          # if symlinked
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
BusyBox combines tiny versions of many common \s-1UNIX\s0 utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in \s-1GNU\s0 coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured \s-1GNU\s0 cousins; however, the
options that are included provide the expected functionality and behave very
much like their \s-1GNU\s0 counterparts.
.PP
BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete \s-1POSIX\s0 environment for any small or embedded
system.
.PP
BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
\&'make' to compile BusyBox using your configuration.
.PP
After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by \s-1CONFIG_PREFIX. CONFIG_PREFIX\s0 can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by \s-1CONFIG_PREFIX.\s0
.SH "USAGE"
.IX Header "USAGE"
BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.
.PP
You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering
.PP
.Vb 1
\&        /bin/busybox ls
.Ve
.PP
will also cause BusyBox to behave as 'ls'.
.PP
Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.
.PP
For example, entering
.PP
.Vb 2
\&        ln \-s /bin/busybox ls
\&        ./ls
.Ve
.PP
will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.
.PP
If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.
.SH "COMMON OPTIONS"
.IX Header "COMMON OPTIONS"
Most BusyBox applets support the \fB\-\-help\fR argument to provide a terse runtime
description of their behavior.  If the \s-1CONFIG_FEATURE_VERBOSE_USAGE\s0 option has
been enabled, more detailed usage information will also be available.
.SH "COMMANDS"
.IX Header "COMMANDS"
Currently available applets include:
.PP
.Vb 10
\&        [, [[, ar, base64, basename, bunzip2, bzcat, bzip2, cal, cat, catv,
\&        chgrp, chmod, chown, cp, cpio, cut, dd, echo, egrep, env, expand,
\&        expr, false, fgrep, find, fold, fsync, grep, gunzip, gzip, head,
\&        install, ln, ls, lzcat, lzma, lzop, lzopcat, md5sum, mkdir, mkfifo,
\&        mknod, mv, nice, nohup, od, printf, pwd, readlink, realpath, rm,
\&        rmdir, sed, seq, sha1sum, sha256sum, sha3sum, sha512sum, sleep,
\&        sort, split, strings, stty, sum, sync, tac, tail, tar, tee, test,
\&        touch, tr, true, truncate, uname, uncompress, unexpand, uniq,
\&        unlink, unlzma, unlzop, unxz, unzip, usleep, uudecode, uuencode, wc,
\&        which, whoami, xargs, xz, xzcat, yes, zcat
.Ve
.SH "COMMAND DESCRIPTIONS"
.IX Header "COMMAND DESCRIPTIONS"
.IP "\fBar\fR" 4
.IX Item "ar"
ar [\-o] [\-v] [\-p] [\-t] [\-x] \s-1ARCHIVE FILES\s0
.Sp
Extract or list \s-1FILES\s0 from an ar archive
.Sp
.Vb 5
\&        \-o      Preserve original dates
\&        \-p      Extract to stdout
\&        \-t      List
\&        \-x      Extract
\&        \-v      Verbose
.Ve
.IP "\fBbase64\fR" 4
.IX Item "base64"
base64 [\-d] [\s-1FILE\s0]
.Sp
Base64 encode or decode \s-1FILE\s0 to standard output
	\-d	Decode data
.IP "\fBbasename\fR" 4
.IX Item "basename"
basename \s-1FILE\s0 [\s-1SUFFIX\s0]
.Sp
Strip directory path and .SUFFIX from \s-1FILE\s0
.IP "\fBbunzip2\fR" 4
.IX Item "bunzip2"
bunzip2 [\-cf] [\s-1FILE\s0]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 2
\&        \-c      Write to stdout
\&        \-f      Force
.Ve
.IP "\fBbzcat\fR" 4
.IX Item "bzcat"
bzcat [\s-1FILE\s0]...
.Sp
Decompress to stdout
.IP "\fBbzip2\fR" 4
.IX Item "bzip2"
bzip2 [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Compress FILEs (or stdin) with bzip2 algorithm
.Sp
.Vb 4
\&        \-1..9   Compression level
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
.Ve
.IP "\fBcal\fR" 4
.IX Item "cal"
cal [\-jy] [[\s-1MONTH\s0] \s-1YEAR\s0]
.Sp
Display a calendar
.Sp
.Vb 2
\&        \-j      Use julian dates
\&        \-y      Display the entire year
.Ve
.IP "\fBcat\fR" 4
.IX Item "cat"
cat [\s-1FILE\s0]...
.Sp
Concatenate FILEs and print them to stdout
.IP "\fBcatv\fR" 4
.IX Item "catv"
catv [\-etv] [\s-1FILE\s0]...
.Sp
Display nonprinting characters as ^x or M\-x
.Sp
.Vb 3
\&        \-e      End each line with $
\&        \-t      Show tabs as ^I
\&        \-v      Don\*(Aqt use ^x or M\-x escapes
.Ve
.IP "\fBchgrp\fR" 4
.IX Item "chgrp"
chgrp [\-RhLHPcvf]... \s-1GROUP FILE...\s0
.Sp
Change the group membership of each \s-1FILE\s0 to \s-1GROUP\s0
.Sp
.Vb 8
\&        \-R      Recurse
\&        \-h      Affect symlinks instead of symlink targets
\&        \-L      Traverse all symlinks to directories
\&        \-H      Traverse symlinks on command line only
\&        \-P      Don\*(Aqt traverse symlinks (default)
\&        \-c      List changed files
\&        \-v      Verbose
\&        \-f      Hide errors
.Ve
.IP "\fBchmod\fR" 4
.IX Item "chmod"
chmod [\-Rcvf] MODE[,MODE]... \s-1FILE...\s0
.Sp
Each \s-1MODE\s0 is one or more of the letters ugoa, one of the
symbols +\-= and one or more of the letters rwxst
.Sp
.Vb 4
\&        \-R      Recurse
\&        \-c      List changed files
\&        \-v      List all files
\&        \-f      Hide errors
.Ve
.IP "\fBchown\fR" 4
.IX Item "chown"
chown [\-RhLHPcvf]... USER[:[\s-1GRP\s0]] \s-1FILE...\s0
.Sp
Change the owner and/or group of each \s-1FILE\s0 to \s-1USER\s0 and/or \s-1GRP\s0
.Sp
.Vb 8
\&        \-R      Recurse
\&        \-h      Affect symlinks instead of symlink targets
\&        \-L      Traverse all symlinks to directories
\&        \-H      Traverse symlinks on command line only
\&        \-P      Don\*(Aqt traverse symlinks (default)
\&        \-c      List changed files
\&        \-v      List all files
\&        \-f      Hide errors
.Ve
.IP "\fBcp\fR" 4
.IX Item "cp"
cp [\s-1OPTIONS\s0] \s-1SOURCE... DEST\s0
.Sp
Copy \s-1SOURCE\s0(s) to \s-1DEST\s0
.Sp
.Vb 10
\&        \-a      Same as \-dpR
\&        \-R,\-r   Recurse
\&        \-d,\-P   Preserve symlinks (default if \-R)
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-p      Preserve file attributes if possible
\&        \-f      Overwrite
\&        \-i      Prompt before overwrite
\&        \-l,\-s   Create (sym)links
\&        \-u      Copy only newer files
.Ve
.IP "\fBcpio\fR" 4
.IX Item "cpio"
cpio [\-dmvu] [\-F \s-1FILE\s0] [\-R USER[:GRP]] [\-H newc] [\-tio] [\-p \s-1DIR\s0] [\s-1EXTR_FILE\s0]...
.Sp
Extract or list files from a cpio archive, or
create an archive (\-o) or copy files (\-p) using file list on stdin
.Sp
Main operation mode:
.Sp
.Vb 5
\&        \-t      List
\&        \-i      Extract EXTR_FILEs (or all)
\&        \-o      Create (requires \-H newc)
\&        \-p DIR  Copy files to DIR
\&Options:
\&
\&        \-d      Make leading directories
\&        \-m      Preserve mtime
\&        \-v      Verbose
\&        \-u      Overwrite
\&        \-F FILE Input (\-t,\-i,\-p) or output (\-o) file
\&        \-R USER[:GRP]   Set owner of created files
\&        \-H newc Archive format
.Ve
.IP "\fBcut\fR" 4
.IX Item "cut"
cut [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print selected fields from each input \s-1FILE\s0 to stdout
.Sp
.Vb 6
\&        \-b LIST Output only bytes from LIST
\&        \-c LIST Output only characters from LIST
\&        \-d CHAR Use CHAR instead of tab as the field delimiter
\&        \-s      Output only the lines containing delimiter
\&        \-f N    Print only these fields
\&        \-n      Ignored
.Ve
.IP "\fBdd\fR" 4
.IX Item "dd"
dd [if=FILE] [of=FILE] [ibs=N] [obs=N] [bs=N] [count=N] [skip=N]
	[seek=N] [conv=notrunc|noerror|sync|fsync] [iflag=skip_bytes]
.Sp
Copy a file with converting and formatting
.Sp
.Vb 10
\&        if=FILE         Read from FILE instead of stdin
\&        of=FILE         Write to FILE instead of stdout
\&        bs=N            Read and write N bytes at a time
\&        ibs=N           Read N bytes at a time
\&        obs=N           Write N bytes at a time
\&        count=N         Copy only N input blocks
\&        skip=N          Skip N input blocks
\&        seek=N          Skip N output blocks
\&        conv=notrunc    Don\*(Aqt truncate output file
\&        conv=noerror    Continue after read errors
\&        conv=sync       Pad blocks with zeros
\&        conv=fsync      Physically write data out before finishing
\&        conv=swab       Swap every pair of bytes
\&        iflag=skip_bytes        skip=N is in bytes
\&        status=noxfer   Suppress rate output
\&        status=none     Suppress all output
.Ve
.Sp
N may be suffixed by c (1), w (2), b (512), kB (1000), k (1024), \s-1MB, M, GB, G\s0
.IP "\fBecho\fR" 4
.IX Item "echo"
echo [\-neE] [\s-1ARG\s0]...
.Sp
Print the specified ARGs to stdout
.Sp
.Vb 3
\&        \-n      Suppress trailing newline
\&        \-e      Interpret backslash escapes (i.e., \et=tab)
\&        \-E      Don\*(Aqt interpret backslash escapes (default)
.Ve
.IP "\fBenv\fR" 4
.IX Item "env"
env [\-iu] [\-] [name=value]... [\s-1PROG ARGS\s0]
.Sp
Print the current environment or run \s-1PROG\s0 after setting up
the specified environment
.Sp
.Vb 2
\&        \-, \-i   Start with an empty environment
\&        \-u      Remove variable from the environment
.Ve
.IP "\fBexpand\fR" 4
.IX Item "expand"
expand [\-i] [\-t N] [\s-1FILE\s0]...
.Sp
Convert tabs to spaces, writing to stdout
.Sp
.Vb 2
\&        \-i      Don\*(Aqt convert tabs after non blanks
\&        \-t      Tabstops every N chars
.Ve
.IP "\fBexpr\fR" 4
.IX Item "expr"
expr \s-1EXPRESSION\s0
.Sp
Print the value of \s-1EXPRESSION\s0 to stdout
.Sp
\&\s-1EXPRESSION\s0 may be:
.Sp
.Vb 10
\&        ARG1 | ARG2     ARG1 if it is neither null nor 0, otherwise ARG2
\&        ARG1 & ARG2     ARG1 if neither argument is null or 0, otherwise 0
\&        ARG1 < ARG2     1 if ARG1 is less than ARG2, else 0. Similarly:
\&        ARG1 <= ARG2
\&        ARG1 = ARG2
\&        ARG1 != ARG2
\&        ARG1 >= ARG2
\&        ARG1 > ARG2
\&        ARG1 + ARG2     Sum of ARG1 and ARG2. Similarly:
\&        ARG1 \- ARG2
\&        ARG1 * ARG2
\&        ARG1 / ARG2
\&        ARG1 % ARG2
\&        STRING : REGEXP         Anchored pattern match of REGEXP in STRING
\&        match STRING REGEXP     Same as STRING : REGEXP
\&        substr STRING POS LENGTH Substring of STRING, POS counted from 1
\&        index STRING CHARS      Index in STRING where any CHARS is found, or 0
\&        length STRING           Length of STRING
\&        quote TOKEN             Interpret TOKEN as a string, even if
\&                                it is a keyword like \*(Aqmatch\*(Aq or an
\&                                operator like \*(Aq/\*(Aq
\&        (EXPRESSION)            Value of EXPRESSION
.Ve
.Sp
Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\&\e( and \e) or null; if \e( and \e) are not used, they return the number
of characters matched or 0.
.IP "\fBfind\fR" 4
.IX Item "find"
find [\-HL] [\s-1PATH\s0]... [\s-1OPTIONS\s0] [\s-1ACTIONS\s0]
.Sp
Search for files and perform actions on them.
First failed action stops processing of current file.
Defaults: \s-1PATH\s0 is current directory, action is '\-print'
.Sp
.Vb 7
\&        \-L,\-follow      Follow symlinks
\&        \-H              ...on command line only
\&        \-xdev           Don\*(Aqt descend directories on other filesystems
\&        \-maxdepth N     Descend at most N levels. \-maxdepth 0 applies
\&                        actions to command line arguments only
\&        \-mindepth N     Don\*(Aqt act on first N levels
\&        \-depth          Act on directory *after* traversing it
.Ve
.Sp
Actions:
.Sp
.Vb 10
\&        ( ACTIONS )     Group actions for \-o / \-a
\&        ! ACT           Invert ACT\*(Aqs success/failure
\&        ACT1 [\-a] ACT2  If ACT1 fails, stop, else do ACT2
\&        ACT1 \-o ACT2    If ACT1 succeeds, stop, else do ACT2
\&                        Note: \-a has higher priority than \-o
\&        \-name PATTERN   Match file name (w/o directory name) to PATTERN
\&        \-iname PATTERN  Case insensitive \-name
\&        \-path PATTERN   Match path to PATTERN
\&        \-ipath PATTERN  Case insensitive \-path
\&        \-regex PATTERN  Match path to regex PATTERN
\&        \-type X         File type is X (one of: f,d,l,b,c,...)
\&        \-perm MASK      At least one mask bit (+MASK), all bits (\-MASK),
\&                        or exactly MASK bits are set in file\*(Aqs mode
\&        \-mtime DAYS     mtime is greater than (+N), less than (\-N),
\&                        or exactly N days in the past
\&        \-mmin MINS      mtime is greater than (+N), less than (\-N),
\&                        or exactly N minutes in the past
\&        \-newer FILE     mtime is more recent than FILE\*(Aqs
\&        \-inum N         File has inode number N
\&        \-user NAME/ID   File is owned by given user
\&        \-group NAME/ID  File is owned by given group
\&        \-size N[bck]    File size is N (c:bytes,k:kbytes,b:512 bytes(def.))
\&                        +/\-N: file size is bigger/smaller than N
\&        \-links N        Number of links is greater than (+N), less than (\-N),
\&                        or exactly N
\&        \-prune          If current file is directory, don\*(Aqt descend into it
\&If none of the following actions is specified, \-print is assumed
\&        \-print          Print file name
\&        \-print0         Print file name, NUL terminated
\&        \-exec CMD ARG ; Run CMD with all instances of {} replaced by
\&                        file name. Fails if CMD exits with nonzero
\&        \-exec CMD ARG + Run CMD with {} replaced by list of file names
\&        \-delete         Delete current file/directory. Turns on \-depth option
.Ve
.IP "\fBfold\fR" 4
.IX Item "fold"
fold [\-bs] [\-w \s-1WIDTH\s0] [\s-1FILE\s0]...
.Sp
Wrap input lines in each \s-1FILE \s0(or stdin), writing to stdout
.Sp
.Vb 3
\&        \-b      Count bytes rather than columns
\&        \-s      Break at spaces
\&        \-w      Use WIDTH columns instead of 80
.Ve
.IP "\fBfsync\fR" 4
.IX Item "fsync"
fsync [\-d] \s-1FILE...\s0
.Sp
Write files' buffered blocks to disk
.Sp
.Vb 1
\&        \-d      Avoid syncing metadata
.Ve
.IP "\fBgrep\fR" 4
.IX Item "grep"
grep [\-HhnlLoqvsriwFE] [\-m N] [\-A/B/C N] PATTERN/\-e \s-1PATTERN..\s0./\-f \s-1FILE\s0 [\s-1FILE\s0]...
.Sp
Search for \s-1PATTERN\s0 in FILEs (or stdin)
.Sp
.Vb 10
\&        \-H      Add \*(Aqfilename:\*(Aq prefix
\&        \-h      Do not add \*(Aqfilename:\*(Aq prefix
\&        \-n      Add \*(Aqline_no:\*(Aq prefix
\&        \-l      Show only names of files that match
\&        \-L      Show only names of files that don\*(Aqt match
\&        \-c      Show only count of matching lines
\&        \-o      Show only the matching part of line
\&        \-q      Quiet. Return 0 if PATTERN is found, 1 otherwise
\&        \-v      Select non\-matching lines
\&        \-s      Suppress open and read errors
\&        \-r      Recurse
\&        \-i      Ignore case
\&        \-w      Match whole words only
\&        \-x      Match whole lines only
\&        \-F      PATTERN is a literal (not regexp)
\&        \-E      PATTERN is an extended regexp
\&        \-m N    Match up to N times per file
\&        \-A N    Print N lines of trailing context
\&        \-B N    Print N lines of leading context
\&        \-C N    Same as \*(Aq\-A N \-B N\*(Aq
\&        \-e PTRN Pattern to match
\&        \-f FILE Read pattern from file
.Ve
.IP "\fBgunzip\fR" 4
.IX Item "gunzip"
gunzip [\-cft] [\s-1FILE\s0]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 3
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-t      Test file integrity
.Ve
.IP "\fBgzip\fR" 4
.IX Item "gzip"
gzip [\-cfd] [\s-1FILE\s0]...
.Sp
Compress FILEs (or stdin)
.Sp
.Vb 3
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
.Ve
.IP "\fBhead\fR" 4
.IX Item "head"
head [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print first 10 lines of each \s-1FILE \s0(or stdin) to stdout.
With more than one \s-1FILE,\s0 precede each with a filename header.
.Sp
.Vb 5
\&        \-n N[kbm]       Print first N lines
\&        \-n \-N[kbm]      Print all except N last lines
\&        \-c [\-]N[kbm]    Print first N bytes
\&        \-q              Never print headers
\&        \-v              Always print headers
.Ve
.Sp
N may be suffixed by k (x1024), b (x512), or m (x1024^2).
.IP "\fBinstall\fR" 4
.IX Item "install"
install [\-cdDsp] [\-o \s-1USER\s0] [\-g \s-1GRP\s0] [\-m \s-1MODE\s0] [\-t \s-1DIR\s0] [\s-1SOURCE\s0]... \s-1DEST\s0
.Sp
Copy files and set attributes
.Sp
.Vb 9
\&        \-c      Just copy (default)
\&        \-d      Create directories
\&        \-D      Create leading target directories
\&        \-s      Strip symbol table
\&        \-p      Preserve date
\&        \-o USER Set ownership
\&        \-g GRP  Set group ownership
\&        \-m MODE Set permissions
\&        \-t DIR  Install to DIR
.Ve
.IP "\fBln\fR" 4
.IX Item "ln"
ln [\s-1OPTIONS\s0] \s-1TARGET...\s0 LINK|DIR
.Sp
Create a link \s-1LINK\s0 or \s-1DIR/TARGET\s0 to the specified \s-1TARGET\s0(s)
.Sp
.Vb 7
\&        \-s      Make symlinks instead of hardlinks
\&        \-f      Remove existing destinations
\&        \-n      Don\*(Aqt dereference symlinks \- treat like normal file
\&        \-b      Make a backup of the target (if exists) before link operation
\&        \-S suf  Use suffix instead of ~ when making backup files
\&        \-T      2nd arg must be a DIR
\&        \-v      Verbose
.Ve
.IP "\fBls\fR" 4
.IX Item "ls"
ls [\-1AaCxdLHRFplinsehrSXvctu] [\-w \s-1WIDTH\s0] [\s-1FILE\s0]...
.Sp
List directory contents
.Sp
.Vb 10
\&        \-1      One column output
\&        \-a      Include entries which start with .
\&        \-A      Like \-a, but exclude . and ..
\&        \-C      List by columns
\&        \-x      List by lines
\&        \-d      List directory entries instead of contents
\&        \-L      Follow symlinks
\&        \-H      Follow symlinks on command line
\&        \-R      Recurse
\&        \-p      Append / to dir entries
\&        \-F      Append indicator (one of */=@|) to entries
\&        \-l      Long listing format
\&        \-i      List inode numbers
\&        \-n      List numeric UIDs and GIDs instead of names
\&        \-s      List allocated blocks
\&        \-e      List full date and time
\&        \-h      List sizes in human readable format (1K 243M 2G)
\&        \-r      Sort in reverse order
\&        \-S      Sort by size
\&        \-X      Sort by extension
\&        \-v      Sort by version
\&        \-c      With \-l: sort by ctime
\&        \-t      With \-l: sort by mtime
\&        \-u      With \-l: sort by atime
\&        \-w N    Assume the terminal is N columns wide
\&        \-\-color[={always,never,auto}]   Control coloring
.Ve
.IP "\fBlzcat\fR" 4
.IX Item "lzcat"
lzcat [\s-1FILE\s0]...
.Sp
Decompress to stdout
.IP "\fBlzma\fR" 4
.IX Item "lzma"
lzma \-d [\-cf] [\s-1FILE\s0]...
.Sp
Decompress \s-1FILE \s0(or stdin)
.Sp
.Vb 3
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
.Ve
.IP "\fBlzop\fR" 4
.IX Item "lzop"
lzop [\-cfvd123456789CF] [\s-1FILE\s0]...
.Sp
.Vb 7
\&        \-1..9   Compression level
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-v      Verbose
\&        \-F      Don\*(Aqt store or verify checksum
\&        \-C      Also write checksum of compressed block
.Ve
.IP "\fBlzopcat\fR" 4
.IX Item "lzopcat"
lzopcat [\-vCF] [\s-1FILE\s0]...
.Sp
.Vb 2
\&        \-v      Verbose
\&        \-F      Don\*(Aqt store or verify checksum
.Ve
.IP "\fBmd5sum\fR" 4
.IX Item "md5sum"
md5sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1MD5\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBmkdir\fR" 4
.IX Item "mkdir"
mkdir [\s-1OPTIONS\s0] \s-1DIRECTORY...\s0
.Sp
Create \s-1DIRECTORY\s0
.Sp
.Vb 2
\&        \-m MODE Mode
\&        \-p      No error if exists; make parent directories as needed
.Ve
.IP "\fBmkfifo\fR" 4
.IX Item "mkfifo"
mkfifo [\-m \s-1MODE\s0] \s-1NAME\s0
.Sp
Create named pipe
.Sp
.Vb 1
\&        \-m MODE Mode (default a=rw)
.Ve
.IP "\fBmknod\fR" 4
.IX Item "mknod"
mknod [\-m \s-1MODE\s0] \s-1NAME TYPE MAJOR MINOR\s0
.Sp
Create a special file (block, character, or pipe)
.Sp
.Vb 5
\&        \-m MODE Creation mode (default a=rw)
\&TYPE:
\&        b       Block device
\&        c or u  Character device
\&        p       Named pipe (MAJOR and MINOR are ignored)
.Ve
.IP "\fBmv\fR" 4
.IX Item "mv"
mv [\-fin] \s-1SOURCE DEST\s0
or: mv [\-fin] \s-1SOURCE... DIRECTORY\s0
.Sp
Rename \s-1SOURCE\s0 to \s-1DEST,\s0 or move \s-1SOURCE\s0(s) to \s-1DIRECTORY\s0
.Sp
.Vb 3
\&        \-f      Don\*(Aqt prompt before overwriting
\&        \-i      Interactive, prompt before overwrite
\&        \-n      Don\*(Aqt overwrite an existing file
.Ve
.IP "\fBnice\fR" 4
.IX Item "nice"
nice [\-n \s-1ADJUST\s0] [\s-1PROG ARGS\s0]
.Sp
Change scheduling priority, run \s-1PROG\s0
.Sp
.Vb 1
\&        \-n ADJUST       Adjust priority by ADJUST
.Ve
.IP "\fBnohup\fR" 4
.IX Item "nohup"
nohup \s-1PROG ARGS\s0
.Sp
Run \s-1PROG\s0 immune to hangups, with output to a non-tty
.IP "\fBod\fR" 4
.IX Item "od"
od [\-abcdfhilovxs] [\-t \s-1TYPE\s0] [\-A \s-1RADIX\s0] [\-N \s-1SIZE\s0] [\-j \s-1SKIP\s0] [\-S \s-1MINSTR\s0] [\-w \s-1WIDTH\s0] [\s-1FILE\s0]...
.Sp
Print FILEs (or stdin) unambiguously, as octal bytes by default
.IP "\fBprintf\fR" 4
.IX Item "printf"
printf \s-1FORMAT\s0 [\s-1ARG\s0]...
.Sp
Format and print \s-1ARG\s0(s) according to \s-1FORMAT \s0(a\-la C printf)
.IP "\fBpwd\fR" 4
.IX Item "pwd"
pwd
.Sp
Print the full filename of the current working directory
.IP "\fBreadlink\fR" 4
.IX Item "readlink"
readlink [\-fnv] \s-1FILE\s0
.Sp
Display the value of a symlink
.Sp
.Vb 3
\&        \-f      Canonicalize by following all symlinks
\&        \-n      Don\*(Aqt add newline
\&        \-v      Verbose
.Ve
.IP "\fBrealpath\fR" 4
.IX Item "realpath"
realpath \s-1FILE...\s0
.Sp
Return the absolute pathnames of given \s-1FILE\s0
.IP "\fBrm\fR" 4
.IX Item "rm"
rm [\-irf] \s-1FILE...\s0
.Sp
Remove (unlink) FILEs
.Sp
.Vb 3
\&        \-i      Always prompt before removing
\&        \-f      Never prompt
\&        \-R,\-r   Recurse
.Ve
.IP "\fBrmdir\fR" 4
.IX Item "rmdir"
rmdir [\s-1OPTIONS\s0] \s-1DIRECTORY...\s0
.Sp
Remove \s-1DIRECTORY\s0 if it is empty
.Sp
.Vb 1
\&        \-p      Include parents
.Ve
.IP "\fBsed\fR" 4
.IX Item "sed"
sed [\-inrE] [\-f \s-1FILE\s0]... [\-e \s-1CMD\s0]... [\s-1FILE\s0]...
or: sed [\-inrE] \s-1CMD\s0 [\s-1FILE\s0]...
.Sp
.Vb 6
\&        \-e CMD  Add CMD to sed commands to be executed
\&        \-f FILE Add FILE contents to sed commands to be executed
\&        \-i[SFX] Edit files in\-place (otherwise sends to stdout)
\&                Optionally back files up, appending SFX
\&        \-n      Suppress automatic printing of pattern space
\&        \-r,\-E   Use extended regex syntax
.Ve
.Sp
If no \-e or \-f, the first non-option argument is the sed command string.
Remaining arguments are input files (stdin if none).
.IP "\fBseq\fR" 4
.IX Item "seq"
seq [\-w] [\-s \s-1SEP\s0] [\s-1FIRST\s0 [\s-1INC\s0]] \s-1LAST\s0
.Sp
Print numbers from \s-1FIRST\s0 to \s-1LAST,\s0 in steps of \s-1INC.
FIRST, INC\s0 default to 1.
.Sp
.Vb 2
\&        \-w      Pad to last with leading zeros
\&        \-s SEP  String separator
.Ve
.IP "\fBsha1sum\fR" 4
.IX Item "sha1sum"
sha1sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1SHA1\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBsha256sum\fR" 4
.IX Item "sha256sum"
sha256sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1SHA256\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBsha3sum\fR" 4
.IX Item "sha3sum"
sha3sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1SHA3\-512\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBsha512sum\fR" 4
.IX Item "sha512sum"
sha512sum [\-c[sw]] [\s-1FILE\s0]...
.Sp
Print or check \s-1SHA512\s0 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP "\fBsleep\fR" 4
.IX Item "sleep"
sleep [N]...
.Sp
Pause for a time equal to the total of the args given, where each arg can
have an optional suffix of (s)econds, (m)inutes, (h)ours, or (d)ays
.IP "\fBsort\fR" 4
.IX Item "sort"
sort [\-nrugMcszbdfiokt] [\-o \s-1FILE\s0] [\-k start[.offset][opts][,end[.offset][opts]] [\-t \s-1CHAR\s0] [\s-1FILE\s0]...
.Sp
Sort lines of text
.Sp
.Vb 10
\&        \-o FILE Output to FILE
\&        \-c      Check whether input is sorted
\&        \-b      Ignore leading blanks
\&        \-f      Ignore case
\&        \-i      Ignore unprintable characters
\&        \-d      Dictionary order (blank or alphanumeric only)
\&        \-g      General numerical sort
\&        \-M      Sort month
\&        \-n      Sort numbers
\&        \-t CHAR Field separator
\&        \-k N[,M] Sort by Nth field
\&        \-r      Reverse sort order
\&        \-s      Stable (don\*(Aqt sort ties alphabetically)
\&        \-u      Suppress duplicate lines
\&        \-z      Lines are terminated by NUL, not newline
.Ve
.IP "\fBsplit\fR" 4
.IX Item "split"
split [\s-1OPTIONS\s0] [\s-1INPUT\s0 [\s-1PREFIX\s0]]
.Sp
.Vb 3
\&        \-b N[k|m]       Split by N (kilo|mega)bytes
\&        \-l N            Split by N lines
\&        \-a N            Use N letters as suffix
.Ve
.IP "\fBstrings\fR" 4
.IX Item "strings"
strings [\-afo] [\-n \s-1LEN\s0] [\s-1FILE\s0]...
.Sp
Display printable strings in a binary file
.Sp
.Vb 4
\&        \-a      Scan whole file (default)
\&        \-f      Precede strings with filenames
\&        \-n LEN  At least LEN characters form a string (default 4)
\&        \-o      Precede strings with decimal offsets
.Ve
.IP "\fBstty\fR" 4
.IX Item "stty"
stty [\-a|g] [\-F \s-1DEVICE\s0] [\s-1SETTING\s0]...
.Sp
Without arguments, prints baud rate, line discipline,
and deviations from stty sane
.Sp
.Vb 4
\&        \-F DEVICE       Open device instead of stdin
\&        \-a              Print all current settings in human\-readable form
\&        \-g              Print in stty\-readable form
\&        [SETTING]       See manpage
.Ve
.IP "\fBsum\fR" 4
.IX Item "sum"
sum [\-rs] [\s-1FILE\s0]...
.Sp
Checksum and count the blocks in a file
.Sp
.Vb 2
\&        \-r      Use BSD sum algorithm (1K blocks)
\&        \-s      Use System V sum algorithm (512byte blocks)
.Ve
.IP "\fBsync\fR" 4
.IX Item "sync"
sync
.Sp
Write all buffered blocks to disk
.IP "\fBtac\fR" 4
.IX Item "tac"
tac [\s-1FILE\s0]...
.Sp
Concatenate FILEs and print them in reverse
.IP "\fBtail\fR" 4
.IX Item "tail"
tail [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print last 10 lines of each \s-1FILE \s0(or stdin) to stdout.
With more than one \s-1FILE,\s0 precede each with a filename header.
.Sp
.Vb 8
\&        \-f              Print data as file grows
\&        \-c [+]N[kbm]    Print last N bytes
\&        \-n N[kbm]       Print last N lines
\&        \-n +N[kbm]      Start on Nth line and print the rest
\&        \-q              Never print headers
\&        \-s SECONDS      Wait SECONDS between reads with \-f
\&        \-v              Always print headers
\&        \-F              Same as \-f, but keep retrying
.Ve
.Sp
N may be suffixed by k (x1024), b (x512), or m (x1024^2).
.IP "\fBtar\fR" 4
.IX Item "tar"
tar \-[cxtZzJjahmvO] [\-X \s-1FILE\s0] [\-T \s-1FILE\s0] [\-f \s-1TARFILE\s0] [\-C \s-1DIR\s0] [\s-1FILE\s0]...
.Sp
Create, extract, or list files from a tar file
.Sp
Operation:
.Sp
.Vb 10
\&        c       Create
\&        x       Extract
\&        t       List
\&        f       Name of TARFILE (\*(Aq\-\*(Aq for stdin/out)
\&        C       Change to DIR before operation
\&        v       Verbose
\&        Z       (De)compress using compress
\&        z       (De)compress using gzip
\&        J       (De)compress using xz
\&        j       (De)compress using bzip2
\&        a       (De)compress using lzma
\&        O       Extract to stdout
\&        h       Follow symlinks
\&        m       Don\*(Aqt restore mtime
\&        X       File with names to exclude
\&        T       File with names to include
.Ve
.IP "\fBtee\fR" 4
.IX Item "tee"
tee [\-ai] [\s-1FILE\s0]...
.Sp
Copy stdin to each \s-1FILE,\s0 and also to stdout
.Sp
.Vb 2
\&        \-a      Append to the given FILEs, don\*(Aqt overwrite
\&        \-i      Ignore interrupt signals (SIGINT)
.Ve
.IP "\fBtouch\fR" 4
.IX Item "touch"
touch [\-c] [\-d \s-1DATE\s0] [\-t \s-1DATE\s0] [\-r \s-1FILE\s0] \s-1FILE...\s0
.Sp
Update the last-modified date on the given FILE[s]
.Sp
.Vb 4
\&        \-c      Don\*(Aqt create files
\&        \-d DT   Date/time to use
\&        \-t DT   Date/time to use
\&        \-r FILE Use FILE\*(Aqs date/time
.Ve
.IP "\fBtr\fR" 4
.IX Item "tr"
tr [\-cds] \s-1STRING1\s0 [\s-1STRING2\s0]
.Sp
Translate, squeeze, or delete characters from stdin, writing to stdout
.Sp
.Vb 3
\&        \-c      Take complement of STRING1
\&        \-d      Delete input characters coded STRING1
\&        \-s      Squeeze multiple output characters of STRING2 into one character
.Ve
.IP "\fBtruncate\fR" 4
.IX Item "truncate"
truncate [\-c] \-s \s-1SIZE FILE...\s0
.Sp
Truncate FILEs to the given size
.Sp
.Vb 2
\&        \-c      Do not create files
\&        \-s SIZE Truncate to SIZE
.Ve
.IP "\fBuname\fR" 4
.IX Item "uname"
uname [\-amnrspvio]
.Sp
Print system information
.Sp
.Vb 9
\&        \-a      Print all
\&        \-m      The machine (hardware) type
\&        \-n      Hostname
\&        \-r      Kernel release
\&        \-s      Kernel name (default)
\&        \-p      Processor type
\&        \-v      Kernel version
\&        \-i      The hardware platform
\&        \-o      OS name
.Ve
.IP "\fBuncompress\fR" 4
.IX Item "uncompress"
uncompress [\-cf] [\s-1FILE\s0]...
.Sp
Decompress .Z file[s]
.Sp
.Vb 2
\&        \-c      Write to stdout
\&        \-f      Overwrite
.Ve
.IP "\fBunexpand\fR" 4
.IX Item "unexpand"
unexpand [\-fa][\-t N] [\s-1FILE\s0]...
.Sp
Convert spaces to tabs, writing to stdout
.Sp
.Vb 3
\&        \-a      Convert all blanks
\&        \-f      Convert only leading blanks
\&        \-t N    Tabstops every N chars
.Ve
.IP "\fBuniq\fR" 4
.IX Item "uniq"
uniq [\-cdu][\-f,s,w N] [\s-1INPUT\s0 [\s-1OUTPUT\s0]]
.Sp
Discard duplicate lines
.Sp
.Vb 6
\&        \-c      Prefix lines by the number of occurrences
\&        \-d      Only print duplicate lines
\&        \-u      Only print unique lines
\&        \-f N    Skip first N fields
\&        \-s N    Skip first N chars (after any skipped fields)
\&        \-w N    Compare N characters in line
.Ve
.IP "\fBunlink\fR" 4
.IX Item "unlink"
unlink \s-1FILE\s0
.Sp
Delete \s-1FILE\s0 by calling \fIunlink()\fR
.IP "\fBunlzma\fR" 4
.IX Item "unlzma"
unlzma [\-cf] [\s-1FILE\s0]...
.Sp
Decompress \s-1FILE \s0(or stdin)
.Sp
.Vb 2
\&        \-c      Write to stdout
\&        \-f      Force
.Ve
.IP "\fBunlzop\fR" 4
.IX Item "unlzop"
unlzop [\-cfvCF] [\s-1FILE\s0]...
.Sp
.Vb 4
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-v      Verbose
\&        \-F      Don\*(Aqt store or verify checksum
.Ve
.IP "\fBunxz\fR" 4
.IX Item "unxz"
unxz [\-cf] [\s-1FILE\s0]...
.Sp
Decompress \s-1FILE \s0(or stdin)
.Sp
.Vb 2
\&        \-c      Write to stdout
\&        \-f      Force
.Ve
.IP "\fBunzip\fR" 4
.IX Item "unzip"
unzip [\-lnopq] FILE[.zip] [\s-1FILE\s0]... [\-x \s-1FILE...\s0] [\-d \s-1DIR\s0]
.Sp
Extract FILEs from \s-1ZIP\s0 archive
.Sp
.Vb 7
\&        \-l      List contents (with \-q for short form)
\&        \-n      Never overwrite files (default: ask)
\&        \-o      Overwrite
\&        \-p      Print to stdout
\&        \-q      Quiet
\&        \-x FILE Exclude FILEs
\&        \-d DIR  Extract into DIR
.Ve
.IP "\fBusleep\fR" 4
.IX Item "usleep"
usleep N
.Sp
Pause for N microseconds
.IP "\fBuudecode\fR" 4
.IX Item "uudecode"
uudecode [\-o \s-1OUTFILE\s0] [\s-1INFILE\s0]
.Sp
Uudecode a file
Finds \s-1OUTFILE\s0 in uuencoded source unless \-o is given
.IP "\fBuuencode\fR" 4
.IX Item "uuencode"
uuencode [\-m] [\s-1FILE\s0] \s-1STORED_FILENAME\s0
.Sp
Uuencode \s-1FILE \s0(or stdin) to stdout
.Sp
.Vb 1
\&        \-m      Use base64 encoding per RFC1521
.Ve
.IP "\fBwc\fR" 4
.IX Item "wc"
wc [\-clwL] [\s-1FILE\s0]...
.Sp
Count lines, words, and bytes for each \s-1FILE \s0(or stdin)
.Sp
.Vb 4
\&        \-c      Count bytes
\&        \-l      Count newlines
\&        \-w      Count words
\&        \-L      Print longest line length
.Ve
.IP "\fBwhich\fR" 4
.IX Item "which"
which [\s-1COMMAND\s0]...
.Sp
Locate a \s-1COMMAND\s0
.IP "\fBwhoami\fR" 4
.IX Item "whoami"
whoami
.Sp
Print the user name associated with the current effective user id
.IP "\fBxargs\fR" 4
.IX Item "xargs"
xargs [\s-1OPTIONS\s0] [\s-1PROG ARGS\s0]
.Sp
Run \s-1PROG\s0 on every item given by stdin
.Sp
.Vb 9
\&        \-p      Ask user whether to run each command
\&        \-r      Don\*(Aqt run command if input is empty
\&        \-0      Input is separated by NUL characters
\&        \-t      Print the command on stderr before execution
\&        \-e[STR] STR stops input processing
\&        \-n N    Pass no more than N args to PROG
\&        \-s N    Pass command line of no more than N bytes
\&        \-I STR  Replace STR within PROG ARGS with input line
\&        \-x      Exit if size is exceeded
.Ve
.IP "\fBxz\fR" 4
.IX Item "xz"
xz \-d [\-cf] [\s-1FILE\s0]...
.Sp
Decompress \s-1FILE \s0(or stdin)
.Sp
.Vb 3
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
.Ve
.IP "\fBxzcat\fR" 4
.IX Item "xzcat"
xzcat [\s-1FILE\s0]...
.Sp
Decompress to stdout
.IP "\fByes\fR" 4
.IX Item "yes"
yes [\s-1STRING\s0]
.Sp
Repeatedly output a line with \s-1STRING,\s0 or 'y'
.IP "\fBzcat\fR" 4
.IX Item "zcat"
zcat [\s-1FILE\s0]...
.Sp
Decompress to stdout
.SH "LIBC NSS"
.IX Header "LIBC NSS"
\&\s-1GNU\s0 Libc (glibc) uses the Name Service Switch (\s-1NSS\s0) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of \s-1NSS. \s0 Some applets however, such as login and su, will use libc functions
that require \s-1NSS.\s0
.PP
If you enable \s-1CONFIG_USE_BB_PWD_GRP,\s0 BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using \s-1NSS. \s0 This may allow you to run your system without the need for
installing any of the \s-1NSS\s0 configuration files and libraries.
.PP
When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc \s-1NSS\s0 stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).
.PP
Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any \s-1NSS\s0 support files or libraries.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Denis Vlasenko <vda.linux@googlemail.com>
.SH "AUTHORS"
.IX Header "AUTHORS"
The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.
.PP
Emanuele Aina <emanuele.aina@tiscali.it>
    run-parts
.PP
Erik Andersen <andersen@codepoet.org>
.PP
.Vb 4
\&    Tons of new stuff, major rewrite of most of the
\&    core apps, tons of new apps as noted in header files.
\&    Lots of tedious effort writing these boring docs that
\&    nobody is going to actually read.
.Ve
.PP
Laurence Anderson <l.d.anderson@warwick.ac.uk>
.PP
.Vb 1
\&    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm
.Ve
.PP
Jeff Angielski <jeff@theptrgroup.com>
.PP
.Vb 1
\&    ftpput, ftpget
.Ve
.PP
Edward Betts <edward@debian.org>
.PP
.Vb 1
\&    expr, hostid, logname, whoami
.Ve
.PP
John Beppu <beppu@codepoet.org>
.PP
.Vb 1
\&    du, nslookup, sort
.Ve
.PP
Brian Candler <B.Candler@pobox.com>
.PP
.Vb 1
\&    tiny\-ls(ls)
.Ve
.PP
Randolph Chung <tausq@debian.org>
.PP
.Vb 1
\&    fbset, ping, hostname
.Ve
.PP
Dave Cinege <dcinege@psychosis.com>
.PP
.Vb 2
\&    more(v2), makedevs, dutmp, modularization, auto links file,
\&    various fixes, Linux Router Project maintenance
.Ve
.PP
Jordan Crouse <jordan@cosmicpenguin.net>
.PP
.Vb 1
\&    ipcalc
.Ve
.PP
Magnus Damm <damm@opensource.se>
.PP
.Vb 1
\&    tftp client insmod powerpc support
.Ve
.PP
Larry Doolittle <ldoolitt@recycle.lbl.gov>
.PP
.Vb 1
\&    pristine source directory compilation, lots of patches and fixes.
.Ve
.PP
Glenn Engel <glenne@engel.org>
.PP
.Vb 1
\&    httpd
.Ve
.PP
Gennady Feldman <gfeldman@gena01.com>
.PP
.Vb 2
\&    Sysklogd (single threaded syslogd, IPC Circular buffer support,
\&    logread), various fixes.
.Ve
.PP
Karl M. Hegbloom <karlheg@debian.org>
.PP
.Vb 1
\&    cp_mv.c, the test suite, various fixes to utility.c, &c.
.Ve
.PP
Daniel Jacobowitz <dan@debian.org>
.PP
.Vb 1
\&    mktemp.c
.Ve
.PP
Matt Kraai <kraai@alumni.cmu.edu>
.PP
.Vb 1
\&    documentation, bugfixes, test suite
.Ve
.PP
Stephan Linz <linz@li\-pro.net>
.PP
.Vb 1
\&    ipcalc, Red Hat equivalence
.Ve
.PP
John Lombardo <john@deltanet.com>
.PP
.Vb 1
\&    tr
.Ve
.PP
Glenn McGrath <bug1@iinet.net.au>
.PP
.Vb 3
\&    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
\&    nameif, sed, patch, fold, install, uudecode.
\&    Various bugfixes, review and apply numerous patches.
.Ve
.PP
Manuel Novoa \s-1III\s0 <mjn3@codepoet.org>
.PP
.Vb 3
\&    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
\&    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
\&    get_last_path_component, simplify_path, and a number trivial libbb routines
\&
\&    also bug fixes, partial rewrites, and size optimizations in
\&    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
\&    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
\&    interface, dutmp, ifconfig, route
.Ve
.PP
Vladimir Oleynik <dzo@simtreas.ru>
.PP
.Vb 4
\&    cmdedit; xargs(current), httpd(current);
\&    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
\&    locale, various fixes
\&    and irreconcilable critic of everything not perfect.
.Ve
.PP
Bruce Perens <bruce@pixar.com>
.PP
.Vb 2
\&    Original author of BusyBox in 1995, 1996. Some of his code can
\&    still be found hiding here and there...
.Ve
.PP
Tim Riker <Tim@Rikers.org>
.PP
.Vb 1
\&    bug fixes, member of fan club
.Ve
.PP
Kent Robotti <robotti@metconnect.com>
.PP
.Vb 1
\&    reset, tons and tons of bug reports and patches.
.Ve
.PP
Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>
.PP
.Vb 1
\&    wget \- Contributed by permission of Covad Communications
.Ve
.PP
Pavel Roskin <proski@gnu.org>
.PP
.Vb 1
\&    Lots of bugs fixes and patches.
.Ve
.PP
Gyepi Sam <gyepi@praxis\-sw.com>
.PP
.Vb 1
\&    Remote logging feature for syslogd
.Ve
.PP
Linus Torvalds <torvalds@transmeta.com>
.PP
.Vb 1
\&    mkswap, fsck.minix, mkfs.minix
.Ve
.PP
Mark Whitley <markw@codepoet.org>
.PP
.Vb 2
\&    grep, sed, cut, xargs(previous),
\&    style\-guide, new\-applet\-HOWTO, bug fixes, etc.
.Ve
.PP
Charles P. Wright <cpwright@villagenet.com>
.PP
.Vb 1
\&    gzip, mini\-netcat(nc)
.Ve
.PP
Enrique Zanardi <ezanardi@ull.es>
.PP
.Vb 1
\&    tarcat (since removed), loadkmap, various fixes, Debian maintenance
.Ve
.PP
Tito Ragusa <farmatito@tiscali.it>
.PP
.Vb 1
\&    devfsd and size optimizations in strings, openvt and deallocvt.
.Ve
.PP
Paul Fox <pgf@foxharp.boston.ma.us>
.PP
.Vb 1
\&    vi editing mode for ash, various other patches/fixes
.Ve
.PP
Roberto A. Foglietta <me@roberto.foglietta.name>
.PP
.Vb 1
\&    port: dnsd
.Ve
.PP
Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>
.PP
.Vb 1
\&    misc
.Ve
.PP
Mike Frysinger <vapier@gentoo.org>
.PP
.Vb 1
\&    initial e2fsprogs, printenv, setarch, sum, misc
.Ve
.PP
Jie Zhang <jie.zhang@analog.com>
.PP
.Vb 1
\&    fixed two bugs in msh and hush (exitcode of killed processes)
.Ve
